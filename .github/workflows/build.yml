name: build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Discord Commits
        uses: Sniddl/discord-commits@v1.2
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          message: "Received commit to master branch. Beginning CICD.\nDiff: {{ github.context.payload.compare }}"
          embed: '{ "title": "{{ commit.title }}", "description": "{{ commit.description }}", "url": "{{ commit.url }}", "author": { "name": "{{ commit.author.name }} ({{ commit.author.username }})", "icon_url": "https://avatars.io/gravatar/{{ commit.author.email }}"} }'

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v1.4.1
        with:
          node-version: 12.x

      - name: Setup Python
        uses: actions/setup-python@v1.2.0
        with:
          python-version: 2.x
          architecture: x64

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.0


        # The steps are ordered based on least likely to change to most likely to change.
        # It makes CICD much more efficient with caches.
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load yarn cache
        uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install packages
        run: yarn install

      - name: Lint JS
        run: yarn lint:ci

      - name: Load flatbuffer definition cache
        uses: actions/cache@v1
        id: flatbuffer-cache
        with:
          path: output/flatbuffers
          key: flatbuffers-${{ hashFiles('flatbuffers/schema/**') }}
          restore-keys: |
            flatbuffers-

      - name: Build flatbuffer definitions
        if: steps.flatbuffer-cache.outputs.cache-hit != 'true'
        run: yarn build-flatbuffers

      - name: Flatbuffer OK Notice
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          description: Flatbuffers built OK.
          details: ""
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Load overlay DLL cache
        uses: actions/cache@v1
        id: overlay-dll-cache
        with:
          path: output/overlay/Release
          key: overlay-dll-${{ hashFiles('overlay/**') }}
          restore-keys: |
            overlay-dll-

      - name: Build overlay DLL
        if: steps.overlay-dll-cache.outputs.cache-hit != 'true'
        run: yarn build-overlay

      - name: Overlay DLL OK Notice
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          description: Overlay DLL built OK.
          details: ""
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Load native node module cache
        uses: actions/cache@v1
        id: native-cache
        with:
          path: build/Release
          key: native-${{ hashFiles('app/main/native/**') }}
          restore-keys: |
            native-

      - name: Build native node module
        if: steps.native-cache.outputs.cache-hit != 'true'
        run: yarn build-native

      - name: Native node module built OK
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          description: Native node module built OK.
          details: ""
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Build main process
        run: yarn build-main

      - name: Main process built OK
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          description: Main process built OK.
          details: ""
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Build renderer process
        run: yarn build-renderer

      - name: Renderer process built OK
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          description: Renderer process built OK.
          details: ""
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Test packaging
        run: yarn package-skip-build

      - name: Packaging successful
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          description: Commit OK, production build was packaged successfully.
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Run semantic-release
        if: github.event_name == 'push'
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Packaging successful
        uses: rjstone/discord-webhook-notify@v1
        if: steps.semantic.outputs.new_release_published == 'true'
        with:
          severity: info
          description: semantic-release has released v${{ steps.semantic.outputs.new_release_version }}, building release assets
          details: ""
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Get release made by semantic-release
        uses: octokit/request-action@v2.x
        if: steps.semantic.outputs.new_release_published == 'true'
        id: get_latest_release
        with:
          route: GET /repos/:repository/releases/tags/v${{ steps.semantic.outputs.new_release_version }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse output from GitHub API
        if: steps.semantic.outputs.new_release_published == 'true'
        id: parse_get_latest_release
        uses: gr2m/get-json-paths-action@v1.x
        with:
          json: ${{ steps.get_latest_release.outputs.data }}
          upload_url: upload_url

      - name: Inject Sentry DSN
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["**/sentry.*.js"]'
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Package for release asset
        if: steps.semantic.outputs.new_release_published == 'true'
        run: yarn package-release

      - name: Setup Sentry CLI
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: mathrix-education/setup-sentry-cli@0.1.0
        with:
          version: latest
          url: https://sentry.io/
          token: ${{ secrets.SENTRY_TOKEN }} # from GitHub secrets
          organization: evevision
          project: evevision

      - name: Create Sentry.io release
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          sentry-cli releases new v${{ steps.semantic.outputs.new_release_version }}
          sentry-cli releases files v${{ steps.semantic.outputs.new_release_version }} upload-sourcemaps ./app
          sentry-cli releases finalize v${{ steps.semantic.outputs.new_release_version }}

      - name: Upload asset to release
        if: steps.semantic.outputs.new_release_published == 'true'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.parse_get_latest_release.outputs.upload_url }}
          asset_path: ./release/EveVision.exe
          asset_name: EveVision.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Packaging successful
        uses: rjstone/discord-webhook-notify@v1
        if: steps.semantic.outputs.new_release_published == 'true'
        with:
          severity: info
          color: "#ff00aa"
          text: <@&699707458175893576> New EveVision Released!
          description: EveVision v${{ steps.semantic.outputs.new_release_version }} has been released!
          details: Visit https://github.com/evevision/evevision/releases to download.
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Build Failure
        uses: rjstone/discord-webhook-notify@v1
        if: failure()
        with:
          severity: error
          description: Build failed!
          details: ""
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Build Cancelled
        uses: rjstone/discord-webhook-notify@v1
        if: cancelled()
        with:
          severity: warn
          description: Build cancelled!
          details: ""
          footer: ${{ github.sha }} Run #${{ github.run_id }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
